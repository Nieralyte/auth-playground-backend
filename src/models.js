import _ from 'lodash-fp'
import R from 'ramda'
import $ from 'D:/docs/projects/libs/nieralyte-utils/dist-node'

import breezeSequelize from 'breeze-sequelize'
import metadataHelper from 'D:/docs/projects/libs/_vendor/_node/breeze.metadata-helper.MODIFIED.js'

const SequelizeManager = breezeSequelize.SequelizeManager
const breeze = breezeSequelize.breeze

metadataHelper(breeze)

const MetadataHelper = breeze.config.MetadataHelper
const EntityManager = breeze.EntityManager
const MetadataStore = breeze.MetadataStore
const DT = breeze.DataType



const models = {}

export default models




//var User = models.User =
//  sequelize.define('users', {
//    username: {
//      type: Sequelize.STRING,
//      primaryKey: true,
//    },
//    
//    //email: {
//    //  type: Sequelize.STRING,
//    //  primaryKey: true,
//    //  
//    //  validate: {
//    //    isEmail: true,
//    //  },
//    //},
//    
//    verifier: {
//      type: Sequelize.STRING,
//      allowNull: false,
//    },
//    
//    //name: Sequelize.STRING,
//    
//    
//    //occupation_id: {
//    //  type: Sequelize.INTEGER,
//    //  
//    //  references: {
//    //    model: Occupation,
//    //    keys: 'id',
//    //  },
//    //},
//  })




const helper = new MetadataHelper(
  'randomNamespace',
  breeze.AutoGeneratedKeyType.Identity
)


const store = new MetadataStore()
helper.addDataService(store, 'randomServiceName')



helper.addTypeToStore(store, {
  name: 'users',
  
  dataProperties: {
    username: {dataType: DT.String, isPartOfKey: true},
    verifier: {dataType: DT.String, isNullable: false},
  },
})


const metadata = models.metadata = store.exportMetadata()


const sequelizeManager = models.sequelizeManager =
  new SequelizeManager(
    {
      dbName: 'auth-playground',
      user: 'Arthur',
      password: '123',
    }, {
      dialect: 'postgres',
      port: 5432,
      
      logging: false, // tmp
    }
  )

const sequelize = models.sequelize = sequelizeManager.sequelize



const sync = models.sync = function() {
  return sequelize.sync().then(function() {
    $.log('synced')
  })
}



const drop = models.drop = function() {
  return sequelize.drop({cascade: true}).then(function() {
    $.log('dropped\ndon\'t forget to "sync()" afterwards')
  })
}




sequelizeManager.importMetadata(metadata)
_.extend(sequelize.models, models)



