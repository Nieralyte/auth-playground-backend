'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodashFp = require('lodash-fp');

var _lodashFp2 = _interopRequireDefault(_lodashFp);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _distNode = require('D:/docs/projects/libs/nieralyte-utils/dist-node');

var _distNode2 = _interopRequireDefault(_distNode);

var _breezeSequelize = require('breeze-sequelize');

var _breezeSequelize2 = _interopRequireDefault(_breezeSequelize);

var _breezeMetadataHelperMODIFIED = require('D:/docs/projects/libs/_vendor/_node/breeze.metadata-helper.MODIFIED.js');

var _breezeMetadataHelperMODIFIED2 = _interopRequireDefault(_breezeMetadataHelperMODIFIED);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SequelizeManager = _breezeSequelize2.default.SequelizeManager;
var breeze = _breezeSequelize2.default.breeze;

(0, _breezeMetadataHelperMODIFIED2.default)(breeze);

var MetadataHelper = breeze.config.MetadataHelper;
var EntityManager = breeze.EntityManager;
var MetadataStore = breeze.MetadataStore;
var DT = breeze.DataType;

var models = {};

exports.default = models;

//var User = models.User =
//  sequelize.define('users', {
//    username: {
//      type: Sequelize.STRING,
//      primaryKey: true,
//    },
//   
//    //email: {
//    //  type: Sequelize.STRING,
//    //  primaryKey: true,
//    // 
//    //  validate: {
//    //    isEmail: true,
//    //  },
//    //},
//   
//    verifier: {
//      type: Sequelize.STRING,
//      allowNull: false,
//    },
//   
//    //name: Sequelize.STRING,
//   
//   
//    //occupation_id: {
//    //  type: Sequelize.INTEGER,
//    // 
//    //  references: {
//    //    model: Occupation,
//    //    keys: 'id',
//    //  },
//    //},
//  })

var helper = new MetadataHelper('randomNamespace', breeze.AutoGeneratedKeyType.Identity);

var store = new MetadataStore();
helper.addDataService(store, 'randomServiceName');

helper.addTypeToStore(store, {
  name: 'users',

  dataProperties: {
    username: { dataType: DT.String, isPartOfKey: true },
    verifier: { dataType: DT.String, isNullable: false }
  }
});

var metadata = models.metadata = store.exportMetadata();

var sequelizeManager = models.sequelizeManager = new SequelizeManager({
  dbName: 'auth-playground',
  user: 'Arthur',
  password: '123'
}, {
  dialect: 'postgres',
  port: 5432,

  logging: false });

// tmp
var sequelize = models.sequelize = sequelizeManager.sequelize;

var sync = models.sync = function () {
  return sequelize.sync().then(function () {
    _distNode2.default.log('synced');
  });
};

var drop = models.drop = function () {
  return sequelize.drop({ cascade: true }).then(function () {
    _distNode2.default.log('dropped\ndon\'t forget to "sync()" afterwards');
  });
};

sequelizeManager.importMetadata(metadata);
_lodashFp2.default.extend(sequelize.models, models);